import AVFoundation
import SpriteKit

class MenuScene: SKScene {
    var detector: EyeBlinkDetector = .init()
    var backgroundMusicPlayer: AVAudioPlayer?
    var titleLabel: SKSpriteNode?
    var startLabel: SKLabelNode?
    var creditLabel: SKLabelNode
    var quitLabel: SKLabelNode?
    var customFont: String = ""
    var unactiveColor: NSColor?
    var activeColor: NSColor?

    override func didMove(to _: SKView) {
        // Setup and play background music with fade in
        unactiveColor = NSColor(named: "CyanText")
        activeColor = NSColor(named: "WhiteText")
        guard let unactiveColor else { return }
        guard let activeColor else { return }

        setupBackgroundMusic()
        customFont = FontHelper.loadCustomFont(assetName: "UpheavalTT", tempFileName: "UpheavalTT.ttf")

        let overlay = SKSpriteNode(color: .black.withAlphaComponent(0.5), size: size)
        overlay.position = CGPoint(x: size.width / 2, y: size.height / 2)
        overlay.zPosition = -2
        addChild(overlay)

        let background = SKSpriteNode(imageNamed: "MenuBg")
        background.position = CGPoint(x: size.width / 2, y: size.height / 2)
        background.zPosition = -1
        background.alpha = 0.4 // for faded effect
        addChild(background)

        titleLabel = SKSpriteNode(imageNamed: "DontBlink")
        if let titleLabel {
            titleLabel.position = CGPoint(x: size.width / 2, y: size.height * 0.7)
            titleLabel.size = CGSize(width: 550, height: 200)
            addChild(titleLabel)
        }

        startLabel = SKLabelNode(text: "Start")
        if let startLabel {
            startLabel.fontName = customFont
            startLabel.fontSize = 32
            startLabel.position = CGPoint(x: self.frame.width / 2, y: 600)
            startLabel.fontColor = SKColor(cgColor: activeColor.cgColor)
            addChild(startLabel)
        }

        quitLabel = SKLabelNode(text: "Quit")
        if let quitLabel {
            quitLabel.fontName = customFont
            quitLabel.fontSize = 32
            quitLabel.position = CGPoint(x: self.frame.width / 2, y: 600)
            quitLabel.fontColor = SKColor(cgColor: activeColor.cgColor)
            addChild(quitLabel)
        }

        quitLabel = SKLabelNode(text: "Quit")
        if let quitLabel {
            quitLabel.fontName = customFont
            quitLabel.fontSize = 32
            quitLabel.position = CGPoint(x: self.frame.width / 2, y: 600)
            quitLabel.fontColor = SKColor(cgColor: activeColor.cgColor)
            addChild(quitLabel)
        }

        // let startButton = SKSpriteNode(imageNamed: "Start")
        // startButton.name = "startButton"
        // startButton.position = CGPoint(x: size.width / 2, y: size.height * 0.35)
        // startButton.size = CGSize(width: 100, height: 35)
        // addChild(startButton)

        // startButton.name = "startButton"
        // startButton.position = CGPoint(x: size.width / 2, y: size.height * 0.35)
        // startButton.size = CGSize(width: 100, height: 35)
        // addChild(startButton)
    }

    func setupBackgroundMusic() {
        // Using NSDataAsset for audio files in Assets catalog
        guard let audioAsset = NSDataAsset(name: "audio_menu") else {
            print("Could not find audio_menu asset")
            return
        }

        do {
            backgroundMusicPlayer = try AVAudioPlayer(data: audioAsset.data)
            backgroundMusicPlayer?.numberOfLoops = -1 // Loop indefinitely
            backgroundMusicPlayer?.volume = 0.0 // Start with volume 0 for fade in
            backgroundMusicPlayer?.play()

            // Fade in effect
            fadeInAudio(player: backgroundMusicPlayer, targetVolume: 0.5, duration: 2.0)
        } catch {
            print("Error playing background music: \(error)")
        }
    }

    func transitionToGameScene() {
        fadeOutAudio(player: backgroundMusicPlayer, duration: 1.0) {
            if let view = self.view {
                let transition = SKTransition.fade(withDuration: 1.0)
                let gameScene = GameScene(size: self.size, detector: self.detector)
                gameScene.scaleMode = .aspectFill
                view.presentScene(gameScene, transition: transition)
            }
        }
    }

    override func keyDown(with event: NSEvent) {
        if event.keyCode == 36 || event.keyCode == 0x31 { // 36 = Return/Enter key, 0x31 spaces
            transitionToGameScene()
        }
    }

    override func mouseDown(with event: NSEvent) {
        let location = event.location(in: self)
        let node = atPoint(location)

        if node.name == "startButton" {
            transitionToGameScene()
        }
    }
}
